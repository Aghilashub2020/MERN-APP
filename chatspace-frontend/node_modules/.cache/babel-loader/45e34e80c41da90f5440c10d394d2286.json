{"ast":null,"code":"var _jsxFileName = \"/home/aurelius/Academics/EAD/proj/MERN-APP/chatspace-frontend/src/Chat.js\";\nimport React from 'react';\nimport './Chat.css';\nimport ChatHeader from './ChatHeader';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport CradGiftcardIcon from '@material-ui/icons/CardGiftcard';\nimport GifIcon from '@material-ui/icons/Gif';\nimport EmojiEmoticonsIcon from '@material-ui/icons/EmojiEmotions';\nimport Message from './Message';\nimport { useSelector } from 'react-redux';\nimport { selectUser } from './features/userSlice';\nimport { selectChannelId, selectChannelName } from './features/appSlice';\nimport { useState } from 'react';\nimport { useEffect } from 'react';\nimport db from './firebase';\nimport firebase from 'firebase';\nimport axios from './axios';\nimport Pusher from 'pusher-js';\nconst pusher = new Pusher('ff9f1dc4d3a281baf530', {\n  cluster: 'ap2'\n});\n\nconst Chat = () => {\n  const user = useSelector(selectUser);\n  const channelId = useSelector(selectChannelId);\n  const channelName = useSelector(selectChannelName);\n  const [input, setInput] = useState('');\n  const [messages, setMessages] = useState([]);\n\n  const getConversation = channelId => {\n    if (channelId) {\n      axios.get(`/get/conversation?id=${channelId}`).then(res => {\n        setMessages(res.data[0].conversation);\n      });\n    }\n  };\n\n  useEffect(() => {\n    getConversation(channelId);\n    const channel = pusher.subscribe('conversation');\n    channel.bind('newMessage', function (data) {\n      getConversation(channelId);\n    }); // if (channelId) {\n    //     db.collection('channels').doc(channelId).collection('messages').orderBy('timestamp', 'desc').onSnapshot(snapshot => {\n    //         setMessages(snapshot.docs.map(doc => doc.data()))\n    //     })\n    // }\n  }, [channelId]);\n\n  const sendMessage = e => {\n    e.preventDefault();\n    axios.post(`/new/message?id=${channelId}`, {\n      message: input,\n      timestamp: Date.now(),\n      user: user\n    }); // db.collection('channels').doc(channelId).collection('messages').add({\n    //     message: input,\n    //     user: user,\n    //     timestamp: firebase.firestore.FieldValue.serverTimestamp()\n    // })\n\n    setInput('');\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chat\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(ChatHeader, {\n    channelName: channelName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chat__messages\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 5\n    }\n  }, messages.map(message => {\n    console.log(message);\n  }), messages.map(message => /*#__PURE__*/React.createElement(Message, {\n    message: message.message,\n    timestamp: message.timestamp,\n    user: message.user,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 33\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chat__input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(AddCircleIcon, {\n    fontSize: \"large\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"form\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    disabled: !channelId,\n    value: input,\n    onChange: e => setInput(e.target.value),\n    placeholder: `Message #${channelName}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"chat__inputButton\",\n    onClick: sendMessage,\n    disabled: !channelId,\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  }, \"Send Message\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chat__inputIcon\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(CradGiftcardIcon, {\n    fontSize: \"large\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(GifIcon, {\n    fontSize: \"large\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(EmojiEmoticonsIcon, {\n    fontSize: \"large\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }\n  }))));\n};\n\nexport default Chat;","map":{"version":3,"sources":["/home/aurelius/Academics/EAD/proj/MERN-APP/chatspace-frontend/src/Chat.js"],"names":["React","ChatHeader","AddCircleIcon","CradGiftcardIcon","GifIcon","EmojiEmoticonsIcon","Message","useSelector","selectUser","selectChannelId","selectChannelName","useState","useEffect","db","firebase","axios","Pusher","pusher","cluster","Chat","user","channelId","channelName","input","setInput","messages","setMessages","getConversation","get","then","res","data","conversation","channel","subscribe","bind","sendMessage","e","preventDefault","post","message","timestamp","Date","now","map","console","log","target","value"],"mappings":"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","sourcesContent":["import React from 'react'\nimport './Chat.css'\nimport ChatHeader from './ChatHeader'\nimport AddCircleIcon from '@material-ui/icons/AddCircle'\nimport CradGiftcardIcon from '@material-ui/icons/CardGiftcard'\nimport GifIcon from '@material-ui/icons/Gif'\nimport EmojiEmoticonsIcon from '@material-ui/icons/EmojiEmotions'\nimport Message from './Message'\nimport {useSelector} from 'react-redux'\nimport {selectUser} from './features/userSlice'\nimport {selectChannelId, selectChannelName} from './features/appSlice'\nimport {useState} from 'react'\nimport {useEffect} from 'react'\nimport db from './firebase'\nimport firebase from 'firebase'\nimport axios from './axios'\nimport Pusher from 'pusher-js'\n\nconst pusher = new Pusher('ff9f1dc4d3a281baf530', {cluster: 'ap2'});\n\nconst Chat = () => {\n  const user = useSelector(selectUser)\n  const channelId = useSelector(selectChannelId)\n  const channelName = useSelector(selectChannelName)\n  const [input, setInput] = useState('')\n  const [messages, setMessages] = useState([])\n\n  const getConversation = (channelId) => {\n    if (channelId) {\n      axios.get(`/get/conversation?id=${channelId}`).then((res) => {\n        setMessages(res.data[0].conversation)\n      })\n    }\n  }\n\n  useEffect(() => {\n    getConversation(channelId)\n    const channel = pusher.subscribe('conversation');\n    channel.bind('newMessage', function(data) {\n      getConversation(channelId)\n    });\n    // if (channelId) {\n    //     db.collection('channels').doc(channelId).collection('messages').orderBy('timestamp', 'desc').onSnapshot(snapshot => {\n    //         setMessages(snapshot.docs.map(doc => doc.data()))\n    //     })\n    // }\n  }, [channelId])\n\n  const sendMessage = (e) => {\n    e.preventDefault()\n\n    axios.post(`/new/message?id=${channelId}`, {\n      message: input,\n      timestamp: Date.now(),\n      user: user\n    })\n    // db.collection('channels').doc(channelId).collection('messages').add({\n    //     message: input,\n    //     user: user,\n    //     timestamp: firebase.firestore.FieldValue.serverTimestamp()\n    // })\n\n    setInput('')\n  }\n\n  return (<div className='chat'>\n    <ChatHeader channelName={channelName}/>\n\n    <div className=\"chat__messages\">\n      {\n        messages.map((message) => {\n          console.log(message)\n        })\n      }\n      {messages.map(message => (<Message message={message.message} timestamp={message.timestamp} user={message.user}/>))}\n    </div>\n\n    <div className=\"chat__input\">\n      <AddCircleIcon fontSize='large'/>\n      <form>\n        <input type=\"text\" disabled={!channelId} value={input} onChange={(e) => setInput(e.target.value)} placeholder={`Message #${channelName}`}/>\n        <button className='chat__inputButton' onClick={sendMessage} disabled={!channelId} type='submit'>Send Message</button>\n      </form>\n\n      <div className=\"chat__inputIcon\">\n        <CradGiftcardIcon fontSize='large'/>\n        <GifIcon fontSize='large'/>\n        <EmojiEmoticonsIcon fontSize='large'/>\n      </div>\n    </div>\n  </div>)\n}\n\nexport default Chat\n"]},"metadata":{},"sourceType":"module"}